#include<bits/stdc++.h>
using namespace std;
int64_t ch[26];
int ind[300002],n;
int invSuff[300002],lcp[300002];
string txt;
vector<int> SuffixArr;
struct suffix
{
    int index;
    int rank[2];
} suffixes[300002];

int cmp(struct suffix a,struct suffix b)
{
    return (a.rank[0]==b.rank[0]?(a.rank[1]<b.rank[1] ? 1:0) : (a.rank[0]<b.rank[0] ? 1:0));
}

void buildsuffixArray()
{
    for(int i=0;i<n;i++)
    {
        suffixes[i].index=i;
        suffixes[i].rank[0]=txt[i]-'a';
        suffixes[i].rank[1]=((i+1)<n) ? (txt[i+1]-'a'): -1 ;
    }
    sort(suffixes,suffixes+n,cmp);
    for(int k=4;k< 2*n;k= k*2)
    {
         int rank = 0;
        int prev_rank = suffixes[0].rank[0];
        suffixes[0].rank[0] = rank;
        ind[suffixes[0].index] = 0;
        for(int i=1;i<n;i++)
        {

            if (suffixes[i].rank[0] == prev_rank &&
                    suffixes[i].rank[1] == suffixes[i-1].rank[1])
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = rank;
            }
           else
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = ++rank;
            }
            ind[suffixes[i].index]=i;
        }
        for(int i=0;i<n;i++)
        {
            int nextindex=suffixes[i].index + k/2;
            suffixes[i].rank[1]=(nextindex < n)? suffixes[ind[nextindex]].rank[0]:  -1 ;
        }
        sort(suffixes,suffixes+n,cmp);
    }
    sort(suffixes,suffixes+n,cmp);
    for(int i=0;i<n;i++)
    {
        SuffixArr.push_back(suffixes[i].index);
    }
    return;
}
void kasai()
{
    for(int i=0;i<n;i++)
    invSuff[SuffixArr[i]]=i;
    int k=0;
    for(int i=0;i<n;i++)
    {
        if(invSuff[i]==0)
        {
            k=0;
            continue;
        }
        int j=SuffixArr[invSuff[i]-1];
        while(i+k<n && j+k<n && txt[i+k]==txt[j+k])
            k++;
        lcp[invSuff[i]]=k;
        if(k>0)
            k--;
    }
    lcp[0]=0;
    return;
}
void countDistinctSubstring()
{
    buildsuffixArray();
    kasai();
    sort(txt.begin(),txt.end());
    int64_t result=(n-SuffixArr[0])-lcp[0];
    ch[txt[0]-'a']=result;
    for(int i=1;i<n;i++)
    {
        while(txt[i]==txt[i-1]  && i<n)
        {
            result +=(n-SuffixArr[i])-lcp[i];
            i++;
        }
        ch[txt[i-1]-'a']=result;
        result=(n-SuffixArr[i])-lcp[i];
        if(i==n-1 && txt[i]!=txt[i-1])
        {
            ch[txt[i]-'a']=result;
        }
    }
    return;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin>>txt;
    if(txt.length()==1)
   {
    ch[txt[0]-'a']++;
    for(int i=0;i<26;i++)
    {
        cout<<ch[i]<<" ";
    }
    return 0;
  }
   n=txt.length();
   countDistinctSubstring();
   int df=SuffixArr.size();
  /* for(int i=0;i<df;i++)
    cout<<SuffixArr[i]<<" ";
    cout<<endl;*/
   for(int i=0;i<26;i++)
   {
       cout<<ch[i]<<" ";
   }
   return 0;
}
