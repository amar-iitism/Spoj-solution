#include<bits/stdc++.h>
using namespace std;
int n;
string txt;
vector<long long int> SuffixArr;
struct suffix
{
    int index;
    int rank[2];
} ;

int cmp(struct suffix a,struct suffix b)
{
    return (a.rank[0]==b.rank[0]?(a.rank[1]<b.rank[1] ? 1:0) : (a.rank[0]<b.rank[0] ? 1:0));
}

void buildsuffixArray(suffix suffixes[])
{   int ind[n+9];
    for(int i=0;i<n;i++)
    {
        suffixes[i].index=i;
        suffixes[i].rank[0]=txt[i]-' ';
        suffixes[i].rank[1]=((i+1)<n) ? (txt[i+1]-' '): -1 ;
    }
    sort(suffixes,suffixes+n,cmp);
    for(int k=4;k< 2*n;k= k*2)
    {
         int rank = 0;
        int prev_rank = suffixes[0].rank[0];
        suffixes[0].rank[0] = rank;
        ind[suffixes[0].index] = 0;
        for(int i=1;i<n;i++)
        {

            if (suffixes[i].rank[0] == prev_rank &&
                    suffixes[i].rank[1] == suffixes[i-1].rank[1])
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = rank;
            }
           else
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = ++rank;
            }
            ind[suffixes[i].index]=i;
        }
        for(int i=0;i<n;i++)
        {
            int nextindex=suffixes[i].index + k/2;
            suffixes[i].rank[1]=(nextindex < n)? suffixes[ind[nextindex]].rank[0]:  -1 ;
        }
        sort(suffixes,suffixes+n,cmp);
    }
    sort(suffixes,suffixes+n,cmp);
    for(int i=0;i<n;i++)
    {
        SuffixArr.push_back(suffixes[i].index);
    }
    return;
}
void kasai(long long int lcp[])
{   long long int invSuff[n+9];
    for(int i=0;i<n;i++)
    invSuff[SuffixArr[i]]=i;
    int k=0;
    for(int i=0;i<n;i++)
    {
        if(invSuff[i]==0)
        {
            k=0;
            continue;
        }
        int j=SuffixArr[invSuff[i]-1];
        while(i+k<n && j+k<n && txt[i+k]==txt[j+k])
            k++;
        lcp[invSuff[i]]=k;
        if(k>0)
            k--;
    }
    lcp[0]=0;
    return;
}
int main()
{
    ios_base::sync_with_stdio(false);
    int t;
    cin>>t;
    while(t--)
    { SuffixArr.clear();

    cin>>txt;
    n=txt.length();
    suffix suffixes[n+9];
    long long int lcp[n+9];

   // cout<<"length="<<txt.length()<<endl;;
    if(txt.length()==1)
    {
   int ans=1;
    cout<<ans<<endl;}
    else{

    buildsuffixArray(suffixes);
    kasai(lcp);
    long long int ans=0;
    for(int i=0;i<n;i++)
        ans+=n-SuffixArr[i]-lcp[i];
    cout<<ans<<endl;
    }
    }
   return 0;
}
